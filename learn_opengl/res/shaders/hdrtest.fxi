#shader vertex
#version 430 core

layout(location = 0) in vec2 aPosition;
layout(location = 1) in vec2 aTexCoords;

out vec2 v_TexCoord;

void main()
{
	v_TexCoord = aTexCoords;
	gl_Position =  vec4(aPosition.x, aPosition.y, 0.0f, 1.0f);
}

#shader fragment
#version 460 core

layout(location = 0) out vec4 fragColor;

in vec2 v_TexCoord;

uniform sampler2D screenTexture;
uniform float exposure;

float luminance(vec3 v)
{
    return dot(v, vec3(0.2126f, 0.7152f, 0.0722f));
}
            
vec3 scale_luminance(vec3 c_in, float l_out)
{
    // C_out = C_in * (L_out / L_in)
    float l_in = luminance(c_in);
    return c_in * (l_out / l_in);
}

vec3 exposure_tonemap(vec3 h)
{
    return vec3(1.0, 1.0, 1.0) - exp(-h * 1.0f);    
}

vec3 uncharted2_tonemap_partial(vec3 x)
{
    float A = 0.15f;
    float B = 0.50f;
    float C = 0.10f;
    float D = 0.20f;
    float E = 0.02f;
    float F = 0.30f;
    return ((x * (A * x + C * B) + D * E) / (x * (A * x + B) + D * F)) - E / F;
}

vec3 uncharted2_filmic(vec3 v)
{
    float exposure_bias = 2.0f;
    vec3 curr = uncharted2_tonemap_partial(v * exposure_bias);

    vec3 W = vec3(11.2f,11.2f,11.2f);

    vec3 white_scale = vec3(1.0f,1.0f,1.0f) / uncharted2_tonemap_partial(W);
    return curr * white_scale;
}

float rand(vec2 co)
{
    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);
}


void main()
{

    const float gamma = 2.2f;
    
    vec3 hdrColor = texture(screenTexture, v_TexCoord).rgb;          
                
    // Reinhard tone mapping
    //vec3 m = hdrColor / (hdrColor + vec3(1.0,1.0,1.0));

    // Exposure tone mapping
    //vec3 m = exposure_tonemap(hdrColor);

    //Uncharted partial 
    //vec3 m = uncharted2_tonemap_partial(hdrColor);
                
    vec3 m = uncharted2_filmic(hdrColor);
    
    // Gamma correction
    m = pow(m, vec3(1.0 / gamma));
                

	fragColor = vec4(hdrColor, 1.0f);
}
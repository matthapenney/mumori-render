#shader vertex
#version 430 core

layout(location = 0) in vec3 aPosition;
layout(location = 1) in vec3 aNormal;
layout(location = 2) in vec2 texCoord;

out vec3 v_FragPosition;
out vec2 v_TexCoord;
out vec3 v_Normal;
out vec4 v_LightSpace;

uniform mat4 lightSpaceMatrix;
uniform mat4 model;
uniform mat4 PV;

void main()
{
	vec4 worldPos = model* vec4(aPosition.x, aPosition.y, aPosition.z, 1.0f);
	v_FragPosition = worldPos.xyz;

	v_TexCoord = texCoord;
	mat3 normalMat = transpose(inverse(mat3(model)));
	v_Normal = normalMat * aNormal;

	//v_LightSpace = lightSpaceMatrix * worldPos;
	gl_Position =  PV * worldPos;
}

#shader fragment
#version 460 core

layout(location = 0) out vec3 m_gPosition;
layout(location = 1) out vec3 m_gNormal;
layout(location = 2) out vec4 m_gAlbedoSpec;
layout(location = 3) out vec4 m_BrightColor;
layout(location = 4) out vec3 m_Metallic;
layout(location = 5) out vec3 m_Roughness;
layout(location = 6) out vec3 m_AO;

in vec3 v_FragPosition;
in vec2 v_TexCoord;
in vec3 v_Normal;
in vec4 v_LightSpace;


uniform sampler2D texture_diffuse1;
uniform sampler2D texture_specular1;
uniform sampler2D normal1;
uniform vec3 albedo;
uniform sampler2D metallic1;
uniform sampler2D roughness1;
uniform sampler2D AO1;

void main()
{
	m_gPosition = v_FragPosition;

	//m_gNormal = normalize(v_Normal); 

	m_gNormal = texture(normal1, v_TexCoord).rgb;
	
	m_gAlbedoSpec.rgb = texture(texture_diffuse1, v_TexCoord).rgb;

	m_gAlbedoSpec.a = texture(texture_specular1, v_TexCoord).r;
	
	m_BrightColor = v_LightSpace;

	m_Metallic = texture(metallic1, v_TexCoord).rgb;

	m_Roughness = texture(roughness1, v_TexCoord).rgb;

	m_AO = texture(AO1, v_TexCoord).rgb;

	//gl_FragDepth = v_LightSpace.z;


}
#shader vertex
#version 430 core

layout(location = 0) in vec2 aPosition;
layout(location = 1) in vec2 aTexCoords;

out vec2 v_TexCoord;

void main()
{
	v_TexCoord = aTexCoords;
	gl_Position =  vec4(aPosition.x, aPosition.y, 0.0f, 1.0f);
}

#shader fragment
#version 460 core

layout(location = 0) out vec4 fragColor;

in vec2 v_TexCoord;
uniform sampler2D screenTexture;

const float _Threshold = 1.0f;
const float _SoftThreshold = 0.5f;
const float offset = 1.0 / 300.0;  

// Offsets
vec2 offsets[9] = vec2[](
        vec2(-offset,  offset), // top-left
        vec2( 0.0f,    offset), // top-center
        vec2( offset,  offset), // top-right
        vec2(-offset,  0.0f),   // center-left
        vec2( 0.0f,    0.0f),   // center-center
        vec2( offset,  0.0f),   // center-right
        vec2(-offset, -offset), // bottom-left
        vec2( 0.0f,   -offset), // bottom-center
        vec2( offset, -offset)  // bottom-right    
    );


// Edge Detection
float kernel[9] = float[](
        1, 1, 1,
        1,  -8, 1,
        1, 1, 1
    );

vec3 Prefilter(vec3 c)
{
    float brightness = max(c.r, max(c.g, c.b));
    float knee = _Threshold * _SoftThreshold;
    float soft = brightness - _Threshold + knee;
    soft = clamp(soft, 0, 2 * knee);
    soft = soft * soft / (4 * knee + .00001f);
    float contrib = max(0, brightness - _Threshold);
    contrib = contrib/(max(brightness, 0.00001));
    return c * contrib;
}

void main()
{
    
    vec3 sampleTex[9];
    for(int i = 0; i < 9; i++)
    {
        sampleTex[i] = vec3(texture(screenTexture, v_TexCoord.st + offsets[i]));
    }
    vec3 col = vec3(0.0);
    for(int i = 0; i < 9; i++)
        col += sampleTex[i] * kernel[i];
    
    fragColor = vec4(col, 1.0);
} 

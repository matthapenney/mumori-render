#shader vertex
#version 430 core

layout(location = 0) in vec3 aPosition;


uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;
uniform mat4 PV;

out vec3 v_TexCoord;

void main()
{
	v_TexCoord = vec3(model * vec4(aPosition, 1.0f));
	vec4 pos =  -projection * view * model * vec4(aPosition.x, aPosition.y, aPosition.z, 1.0f);

	gl_Position = pos.xyww;
}

#shader fragment
#version 460 core

layout(location = 0) out vec4 fragColor;

in vec3 v_TexCoord;
uniform samplerCube skybox;


vec3 exposure_tonemap(vec3 h)
{
    return vec3(1.0, 1.0, 1.0) - exp(-h * 1.0f);    
}

vec3 uncharted2_tonemap_partial(vec3 x)
{
    float A = 0.15f;
    float B = 0.50f;
    float C = 0.10f;
    float D = 0.20f;
    float E = 0.02f;
    float F = 0.30f;
    return ((x * (A * x + C * B) + D * E) / (x * (A * x + B) + D * F)) - E / F;
}

vec3 uncharted2_filmic(vec3 v)
{
    float exposure_bias = 2.0f;
    vec3 curr = uncharted2_tonemap_partial(v * exposure_bias);

    vec3 W = vec3(11.2f,11.2f,11.2f);

    vec3 white_scale = vec3(1.0f,1.0f,1.0f) / uncharted2_tonemap_partial(W);
    return curr * white_scale;
}

void main()
{
    float gamma = 2.2f;

	vec3 hdrColor = texture(skybox, v_TexCoord).rgb;

	// HDR tonemapping + gamma corect	
	vec3 m = uncharted2_filmic(hdrColor);
	m = pow(hdrColor.rgb, vec3(1.0/gamma));
	fragColor = vec4(m, 1.0f);
	
}	